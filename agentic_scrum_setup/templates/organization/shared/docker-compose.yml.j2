# Organization-Level Shared Services
# Docker Compose configuration for {{ organization_name }}

version: '3.8'

services:
  # PostgreSQL database for shared data
  postgres:
    image: postgres:15-alpine
    container_name: "{{ organization_name }}_postgres"
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-{{ organization_name|lower|replace(' ', '_')|replace('-', '_') }}}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - {{ organization_name|lower|replace(' ', '_')|replace('-', '_') }}_network
    restart: unless-stopped

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: "{{ organization_name }}_redis"
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - {{ organization_name|lower|replace(' ', '_')|replace('-', '_') }}_network
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password}

  # RabbitMQ for message queuing between services
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: "{{ organization_name }}_rabbitmq"
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-admin}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-admin}
    ports:
      - "${RABBITMQ_PORT:-5672}:5672"
      - "${RABBITMQ_MANAGEMENT_PORT:-15672}:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - {{ organization_name|lower|replace(' ', '_')|replace('-', '_') }}_network
    restart: unless-stopped

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: "{{ organization_name }}_prometheus"
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - {{ organization_name|lower|replace(' ', '_')|replace('-', '_') }}_network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: "{{ organization_name }}_grafana"
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - {{ organization_name|lower|replace(' ', '_')|replace('-', '_') }}_network
    restart: unless-stopped

  # Nginx reverse proxy for routing
  nginx:
    image: nginx:alpine
    container_name: "{{ organization_name }}_nginx"
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/ssl:/etc/nginx/ssl
      - nginx_logs:/var/log/nginx
    networks:
      - {{ organization_name|lower|replace(' ', '_')|replace('-', '_') }}_network
    restart: unless-stopped
    depends_on:
      - prometheus
      - grafana

  # ElasticSearch for centralized logging
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: "{{ organization_name }}_elasticsearch"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "${ELASTICSEARCH_PORT:-9200}:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - {{ organization_name|lower|replace(' ', '_')|replace('-', '_') }}_network
    restart: unless-stopped

  # Kibana for log visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: "{{ organization_name }}_kibana"
    ports:
      - "${KIBANA_PORT:-5601}:5601"
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    networks:
      - {{ organization_name|lower|replace(' ', '_')|replace('-', '_') }}_network
    restart: unless-stopped
    depends_on:
      - elasticsearch

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: "{{ organization_name }}_jaeger"
    ports:
      - "${JAEGER_UI_PORT:-16686}:16686"
      - "${JAEGER_COLLECTOR_PORT:-14268}:14268"
    environment:
      COLLECTOR_ZIPKIN_HOST_PORT: :9411
    networks:
      - {{ organization_name|lower|replace(' ', '_')|replace('-', '_') }}_network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  rabbitmq_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  {{ organization_name|lower|replace(' ', '_')|replace('-', '_') }}_network:
    driver: bridge
    name: "{{ organization_name|lower|replace(' ', '_')|replace('-', '_') }}_network"