#!/bin/bash

# Organization Standards Synchronization Script
# Propagates shared standards to all repositories in {{ organization_name }}

set -e

# Configuration
ORGANIZATION_NAME="{{ organization_name }}"
ORGANIZATION_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/../.." && pwd)"
SHARED_STANDARDS_DIR="$ORGANIZATION_ROOT/.agentic/shared_standards"
PROJECTS_DIR="$ORGANIZATION_ROOT/projects"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Help function
show_help() {
    cat << EOF
Organization Standards Synchronization Script

Usage: $0 [OPTIONS] [COMMAND]

Commands:
    sync        Synchronize standards to all repositories (default)
    check       Check which repositories need updates
    list        List all repositories
    help        Show this help message

Options:
    --repo NAME     Sync standards to specific repository only
    --dry-run      Show what would be done without making changes
    --force        Force overwrite even if repository has local changes
    --verbose      Enable verbose output

Examples:
    $0 sync                          # Sync standards to all repositories
    $0 sync --repo backend-api       # Sync standards to specific repository
    $0 check                         # Check which repos need updates
    $0 sync --dry-run               # Preview changes without applying

EOF
}

# Check if organization structure exists
check_organization_structure() {
    if [[ ! -d "$SHARED_STANDARDS_DIR" ]]; then
        log_error "Shared standards directory not found: $SHARED_STANDARDS_DIR"
        log_info "This script must be run from within an AgenticScrum organization"
        exit 1
    fi
    
    if [[ ! -d "$PROJECTS_DIR" ]]; then
        log_error "Projects directory not found: $PROJECTS_DIR"
        log_info "No repositories found in organization"
        exit 1
    fi
}

# Get list of repositories
get_repositories() {
    if [[ -n "$TARGET_REPO" ]]; then
        if [[ -d "$PROJECTS_DIR/$TARGET_REPO" ]]; then
            echo "$TARGET_REPO"
        else
            log_error "Repository '$TARGET_REPO' not found"
            exit 1
        fi
    else
        find "$PROJECTS_DIR" -maxdepth 1 -type d -not -name "$(basename "$PROJECTS_DIR")" -exec basename {} \;
    fi
}

# Check if repository has AgenticScrum configuration
is_agentic_repository() {
    local repo_path="$1"
    [[ -f "$repo_path/agentic_config.yaml" ]] || [[ -f "$repo_path/.agentic_organization_link.yaml" ]]
}

# Get standards files to sync
get_standards_files() {
    if [[ ! -d "$SHARED_STANDARDS_DIR" ]]; then
        return
    fi
    
    find "$SHARED_STANDARDS_DIR" -type f -name "*.md" -o -name "*.yaml" -o -name "*.yml" -o -name "*.json"
}

# Sync standards to a repository
sync_repository_standards() {
    local repo_name="$1"
    local repo_path="$PROJECTS_DIR/$repo_name"
    
    if [[ ! -d "$repo_path" ]]; then
        log_warning "Repository directory not found: $repo_path"
        return 1
    fi
    
    if ! is_agentic_repository "$repo_path"; then
        log_warning "Skipping $repo_name (not an AgenticScrum repository)"
        return 0
    fi
    
    log_info "Syncing standards to repository: $repo_name"
    
    # Create standards directory in repository if it doesn't exist
    local repo_standards_dir="$repo_path/standards"
    if [[ "$DRY_RUN" != "true" ]]; then
        mkdir -p "$repo_standards_dir"
    fi
    
    # Copy standards files
    local files_synced=0
    while IFS= read -r -d '' standards_file; do
        local relative_path="${standards_file#$SHARED_STANDARDS_DIR/}"
        local target_file="$repo_standards_dir/$relative_path"
        local target_dir="$(dirname "$target_file")"
        
        if [[ "$DRY_RUN" == "true" ]]; then
            log_info "  Would copy: $relative_path"
            ((files_synced++))
        else
            # Create target directory if needed
            mkdir -p "$target_dir"
            
            # Check if file needs updating
            if [[ ! -f "$target_file" ]] || [[ "$FORCE_SYNC" == "true" ]] || ! cmp -s "$standards_file" "$target_file"; then
                cp "$standards_file" "$target_file"
                log_info "  Updated: $relative_path"
                ((files_synced++))
            elif [[ "$VERBOSE" == "true" ]]; then
                log_info "  Unchanged: $relative_path"
            fi
        fi
    done < <(find "$SHARED_STANDARDS_DIR" -type f \( -name "*.md" -o -name "*.yaml" -o -name "*.yml" -o -name "*.json" \) -print0)
    
    if [[ $files_synced -gt 0 ]]; then
        log_success "Synced $files_synced files to $repo_name"
    elif [[ "$VERBOSE" == "true" ]]; then
        log_info "No updates needed for $repo_name"
    fi
    
    return 0
}

# Check which repositories need updates
check_repositories() {
    log_info "Checking repositories for standards updates..."
    
    local repos_needing_update=0
    
    while IFS= read -r repo_name; do
        local repo_path="$PROJECTS_DIR/$repo_name"
        
        if ! is_agentic_repository "$repo_path"; then
            continue
        fi
        
        local needs_update=false
        local repo_standards_dir="$repo_path/standards"
        
        while IFS= read -r -d '' standards_file; do
            local relative_path="${standards_file#$SHARED_STANDARDS_DIR/}"
            local target_file="$repo_standards_dir/$relative_path"
            
            if [[ ! -f "$target_file" ]] || ! cmp -s "$standards_file" "$target_file"; then
                if [[ "$needs_update" == "false" ]]; then
                    log_warning "Repository '$repo_name' needs updates:"
                    needs_update=true
                    ((repos_needing_update++))
                fi
                log_info "  - $relative_path"
            fi
        done < <(find "$SHARED_STANDARDS_DIR" -type f \( -name "*.md" -o -name "*.yaml" -o -name "*.yml" -o -name "*.json" \) -print0)
        
    done < <(get_repositories)
    
    if [[ $repos_needing_update -eq 0 ]]; then
        log_success "All repositories are up to date"
    else
        log_info "Run 'sync' command to update repositories"
    fi
}

# List all repositories
list_repositories() {
    log_info "Repositories in organization '$ORGANIZATION_NAME':"
    
    while IFS= read -r repo_name; do
        local repo_path="$PROJECTS_DIR/$repo_name"
        
        if is_agentic_repository "$repo_path"; then
            log_success "  âœ“ $repo_name (AgenticScrum repository)"
        else
            log_warning "  - $repo_name (not an AgenticScrum repository)"
        fi
    done < <(get_repositories)
}

# Sync standards to all repositories
sync_all_repositories() {
    log_info "Synchronizing standards across organization '$ORGANIZATION_NAME'"
    
    if [[ "$DRY_RUN" == "true" ]]; then
        log_warning "DRY RUN MODE - No changes will be made"
    fi
    
    local total_repos=0
    local synced_repos=0
    
    while IFS= read -r repo_name; do
        ((total_repos++))
        if sync_repository_standards "$repo_name"; then
            ((synced_repos++))
        fi
    done < <(get_repositories)
    
    if [[ "$DRY_RUN" == "true" ]]; then
        log_info "Dry run complete. $synced_repos of $total_repos repositories would be updated"
    else
        log_success "Standards sync complete. Updated $synced_repos of $total_repos repositories"
    fi
}

# Parse command line arguments
parse_arguments() {
    COMMAND="sync"
    TARGET_REPO=""
    DRY_RUN="false"
    FORCE_SYNC="false"
    VERBOSE="false"
    
    while [[ $# -gt 0 ]]; do
        case $1 in
            sync|check|list|help)
                COMMAND="$1"
                shift
                ;;
            --repo)
                TARGET_REPO="$2"
                shift 2
                ;;
            --dry-run)
                DRY_RUN="true"
                shift
                ;;
            --force)
                FORCE_SYNC="true"
                shift
                ;;
            --verbose)
                VERBOSE="true"
                shift
                ;;
            -h|--help)
                COMMAND="help"
                shift
                ;;
            *)
                log_error "Unknown option: $1"
                show_help
                exit 1
                ;;
        esac
    done
}

# Main execution
main() {
    parse_arguments "$@"
    
    case $COMMAND in
        help)
            show_help
            ;;
        list)
            check_organization_structure
            list_repositories
            ;;
        check)
            check_organization_structure
            check_repositories
            ;;
        sync)
            check_organization_structure
            sync_all_repositories
            ;;
        *)
            log_error "Unknown command: $COMMAND"
            show_help
            exit 1
            ;;
    esac
}

# Run main function if script is executed directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi