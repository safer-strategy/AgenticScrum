#!/bin/bash

# -----------------------------------------------------------------------------
# Init Script for the '{{ project_name }}' project
#
# This script provides a centralized place to manage the development
# environment, including Docker services, testing, and other utilities.
# -----------------------------------------------------------------------------

# --- Configuration ---
PROJECT_NAME="{{ project_name }}"

# --- Theme & Colors ---
C_RESET='\033[0m'
C_BLACK='\033[0;30m'
C_RED='\033[0;31m'
C_GREEN='\033[0;32m'
C_YELLOW='\033[0;33m'
C_BLUE='\033[0;34m'
C_PURPLE='\033[0;35m'
C_CYAN='\033[0;36m'
C_WHITE='\033[0;37m'
C_BOLD='\033[1m'

# --- Helper Functions ---

# Load environment variables from .env file if it exists
function load_env() {
  if [ -f ".env" ]; then
    export $(cat .env | grep -v '^#' | xargs)
    success "Loaded environment variables from .env"
  fi
}

# Check for required API keys
function check_api_keys() {
  local missing_keys=()
  local has_mcp_config=false
  
  # Check if MCP configuration exists
  if [[ -f ".mcp.json" ]] || [[ -f ".mcp-secrets.json" ]]; then
    has_mcp_config=true
  fi
  
  # Check for Perplexity API key if MCP is configured
  if [[ "$has_mcp_config" == true ]] && [[ -f ".mcp-secrets.json" ]] && grep -q "perplexity-mcp" .mcp-secrets.json 2>/dev/null; then
    if [[ -z "${PERPLEXITY_API_KEY}" ]]; then
      missing_keys+=("PERPLEXITY_API_KEY")
    fi
  fi
  
  if [[ ${{'{#'}}missing_keys[@]} -gt 0 ]]; then
    error "Missing required API keys:"
    printf '  - %s\n' "${missing_keys[@]}"
    echo ""
    info "To fix this:"
    echo "  1. Copy .env.sample to .env: cp .env.sample .env"
    echo "  2. Edit .env and add your API keys"
    echo "  3. Run this script again"
    echo ""
    echo "  Get your Perplexity API key from: https://www.perplexity.ai/settings/api"
    return 1
  fi
  
  success "All required API keys are configured"
  return 0
}

# Setup MCP configuration if needed
function setup_mcp() {
  if [[ -f ".mcp-secrets.json.sample" ]] && [[ ! -f ".mcp-secrets.json" ]]; then
    info "Setting up MCP configuration..."
    
    # Create .mcp-secrets.json from sample
    cp .mcp-secrets.json.sample .mcp-secrets.json
    
    # Replace environment variables in the file
    if command -v envsubst &> /dev/null; then
      envsubst < .mcp-secrets.json.sample > .mcp-secrets.json
      success "Created .mcp-secrets.json with environment variables"
    else
      info "envsubst not found - you'll need to manually update .mcp-secrets.json"
    fi
  fi
}

function header() {
  echo -e "${C_PURPLE}${C_BOLD}"
  echo "    ___    __  __   ____   _____   ____    ___    _   _ "
  echo "   / __|  |  \/  | |  _ \  | ____| |  _ \  / __|  | | | |"
  echo "  | |     | |\/| | | |_) | |  _|   | |_) | \_ \  | |_| |"
  echo "  | |___  | |  | | |  __/  | |___  |  _ <  |___/  |  _  |"
  echo "   \___|  |_|  |_| |_|     |_____| |_| \_\ ____/  |_| |_|"
  echo ""
  echo -e "      >> Welcome to the ${PROJECT_NAME} Environment Manager <<      "
  echo -e "${C_RESET}"
}

function info() {
  echo -e "${C_BLUE}${C_BOLD}INFO:${C_RESET} $1"
}

function success() {
  echo -e "${C_GREEN}${C_BOLD}SUCCESS:${C_RESET} $1"
}

function error() {
  echo -e "${C_RED}${C_BOLD}ERROR:${C_RESET} $1"
}

# --- Core Functions ---
function start_services() {
  info "Starting Docker services in detached mode..."
  if docker-compose up -d --build; then
    success "Services are up and running."
  else
    error "Failed to start Docker services."
    exit 1
  fi
}

function stop_services() {
  info "Stopping Docker services..."
  if docker-compose down; then
    success "Services have been stopped."
  else
    error "Failed to stop Docker services."
  fi
}

function show_logs() {
  info "Tailing logs for all services. Press Ctrl+C to exit."
  docker-compose logs -f
}

function run_tests() {
  info "Running tests inside the app container..."
  # Modify 'app' and the test command as needed
  if docker-compose exec app pytest; then
    success "All tests passed."
  else
    error "Tests failed."
  fi
}

function show_help() {
  header
  echo "Usage: ./init.sh [command]"
  echo ""
  echo "Commands:"
  echo -e "  ${C_YELLOW}up${C_RESET}         - Build and start all Docker services."
  echo -e "  ${C_YELLOW}down${C_RESET}       - Stop and remove all Docker services."
  echo -e "  ${C_YELLOW}logs${C_RESET}       - Tail the logs from all running services."
  echo -e "  ${C_YELLOW}test${C_RESET}       - Run the test suite within the Docker container."
  echo -e "  ${C_YELLOW}setup${C_RESET}      - Setup environment variables and MCP configuration."
  echo -e "  ${C_YELLOW}verify-keys${C_RESET} - Check if all required API keys are configured."
  echo -e "  ${C_YELLOW}test-mcp${C_RESET}   - Test MCP server connections (memory/search)."
  echo -e "  ${C_YELLOW}help${C_RESET}       - Show this help message."
  echo ""
}

function setup_environment() {
  header
  info "Setting up development environment..."
  
  # Check if .env exists, create from sample if not
  if [[ ! -f ".env" ]] && [[ -f ".env.sample" ]]; then
    info "Creating .env from .env.sample..."
    cp .env.sample .env
    echo ""
    error "Please edit .env and add your API keys before continuing."
    echo "  Get your Perplexity API key from: https://www.perplexity.ai/settings/api"
    return 1
  fi
  
  # Load environment variables
  load_env
  
  # Check API keys
  if ! check_api_keys; then
    return 1
  fi
  
  # Setup MCP if needed
  setup_mcp
  
  success "Environment setup complete!"
}

# --- Test MCP Servers ---
function test_mcp_servers() {
  local server="${1:-all}"
  
  # Check if MCP is configured
  if [[ ! -f ".mcp.json" ]]; then
    error "MCP is not configured for this project"
    echo "  Run with --enable-mcp flag when creating the project"
    return 1
  fi
  
  echo "Testing MCP server connections..."
  
  if [[ "$server" == "all" || "$server" == "memory" ]]; then
    # Test memory server
    echo -n "Testing memory server... "
    if command -v npx >/dev/null 2>&1; then
      # Check if memory files exist
      if [[ -d ".agent-memory" ]]; then
        success "Memory directory exists"
      else
        error "Memory directory not found"
      fi
    else
      error "npx not found - install Node.js 16+"
    fi
  fi
  
  if [[ "$server" == "all" || "$server" == "search" ]]; then
    # Test search server
    echo -n "Testing search server... "
    if [[ -n "$PERPLEXITY_API_KEY" ]]; then
      success "API key configured"
    else
      error "PERPLEXITY_API_KEY not set"
    fi
  fi
}

# --- Main Dispatcher ---
function main() {
  # Always load environment variables if available
  load_env
  
  case "$1" in
    up)
      # Check API keys before starting services
      if check_api_keys; then
        start_services
      else
        error "Please run './init.sh setup' first to configure API keys."
      fi
      ;;
    down)
      stop_services
      ;;
    logs)
      show_logs
      ;;
    test)
      run_tests
      ;;
    setup)
      setup_environment
      ;;
    verify-keys)
      check_api_keys && success "All required API keys are configured!" || error "Some API keys are missing"
      ;;
    test-mcp)
      test_mcp_servers "$2"
      ;;
    help|*)
      show_help
      ;;
  esac
}

main "$@"