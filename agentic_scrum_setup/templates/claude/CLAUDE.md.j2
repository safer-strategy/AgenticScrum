# CLAUDE.md

This file provides guidance to Claude Code (claude.ai/code) when working with code in this repository.

## Project Overview

{{ project_name }} is an AgenticScrum-powered {{ language }} project. This project uses AI agents to assist with development following Scrum methodologies.

## Model Recommendations for AgenticScrum Agents

When simulating different agents, consider using appropriate models:

### Agent-to-Model Mapping
- **Product Owner Agent (POA)**: Use `/model opus` for complex requirement analysis
- **Scrum Master Agent (SMA)**: Use `/model sonnet` (default) for coordination
- **Developer Agent (DEVA)**: Use `/model sonnet` (default) for code generation
- **QA Agent (QAA)**: Use `/model sonnet` (default) for code review
- **Security Audit Agent (SAA)**: Use `/model opus` for deep security analysis

### General Model Selection Strategy
- **Planning & Architecture**: `/model opus` (claude-opus-4-0)
- **Development & Implementation**: `/model sonnet` (claude-sonnet-4-0) - RECOMMENDED DEFAULT
- **Quick Tasks**: `/model haiku` (claude-3-5-haiku-latest)

## Key Architecture & Structure

### Directory Structure
- `agents/` - AI agent configurations and personas
- `src/` - Source code for the application
- `tests/` - Test files mirroring the src structure
- `docs/` - Project documentation including user stories and architecture
- `standards/` - Coding standards and linter configurations
- `checklists/` - Quality checklists for various development phases
- `scripts/` - Utility scripts for automation

### Agent System
This project uses the following AI agents:
{% for agent in agents %}
- {{ agent }}
{% endfor %}

## Development Commands

### Environment Management
```bash
./init.sh up      # Start Docker services
./init.sh down    # Stop Docker services
./init.sh logs    # View service logs
./init.sh test    # Run tests
./init.sh help    # Show available commands
```

### {{ language }} Specific Commands
{% if language == 'python' %}
```bash
# Install dependencies
pip install -r requirements.txt

# Run tests
pytest

# Lint code
flake8 src/ tests/
black src/ tests/ --check

# Format code
black src/ tests/
```
{% elif language in ['javascript', 'typescript'] %}
```bash
# Install dependencies
npm install

# Run tests
npm test

# Lint code
npm run lint

# Build project
npm run build
```
{% endif %}

## Coding Standards

Please refer to `standards/coding_standards.md` for detailed coding conventions and best practices specific to this project.

## Important Guidelines

1. Always consult the persona rules in `agents/developer_agent/claude_python_expert/persona_rules.yaml`
2. Follow the Definition of Done checklist in `checklists/definition_of_done.md`
3. Ensure all code changes pass linting and tests before marking tasks complete
4. Use the standardized project structure - don't create new top-level directories
5. When implementing features, check `docs/requirements/user_stories/` for detailed requirements

## Claude Code Specific Notes

### Parameter Handling
- Model parameters (temperature, max_tokens) in configuration files are informational only
- Claude Code controls these parameters directly through the IDE
- Focus on the model selection strategy above for optimal performance

### Agent Simulation
When working on tasks for specific agents:
1. Review the agent's persona rules in `agents/[agent_name]/persona_rules.yaml`
2. Switch to the recommended model for that agent type
3. Follow the agent's specific capabilities and constraints

### Performance Tips
- Use Sonnet 4 as your default model for most tasks
- Switch to Opus 4 only for complex planning or deep analysis
- Leverage Sonnet 4's 64K output capacity for large code generation tasks